#!/usr/bin/env python3 

import math
from pymavlink import mavutil

#Class for formating the mission item
class mission_item:
    def __init__(self, i, current, x, y, z, speed):
        self.seq = i
        self.frame = mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT
        self.command = mavutil.mavlink.MAV_CMD_NAV_WAYPOINT
        self.current = current
        self.autocontinue = 1
        self.param1 = 0.0 #MAV_CMD_NAV_WAYPOINT hold
        self.param2 = 0.200 #MAV_CMD_NAV_WAYPOINT Accept radius
        self.param3 = 0.500 #MAV_CMD_NAV_WAYPOINT pass radius
        self.param4 = speed #MAV_CMD_NAV_WAYPOINT speed (custom parameter)
        self.param5 = x #MAV_CMD_NAV_WAYPOINT latitude
        self.param6 = y #MAV_CMD_NAV_WAYPOINT longitude
        self.param7 = z #MAV_CMD_NAV_WAYPOINT altitude
        self.mission_type = 0 

#Arm the Drone
def arm(the_connection):
    print("--Arming")

    the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,
                            mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM, 0, 1, 0,0,0,0,0,0) # second bit...?

    ack(the_connection, "COMMAND_ACK")

#Takeoff the Drone
def takeoff(the_connection):
    print("--Takeoff Initiated")

    the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component, 
                            mavutil.mavlink.MAV_CMD_NAV_TAKEOFF, 0, 0, 0, 0, math.nan, 0, 0, 10)

    ack(the_connection, "COMMAND_ACK")

#Upload the mission items to the drone
def upload_mission(the_connection, mission_items):
    n = len(mission_items)
    print("-- Sending Message out")

    the_connection.mav.mission_count_send(the_connection.target_system, the_connection.target_component, n, 0)

    ack(the_connection, "MISSION_REQUEST")

    for waypoint in mission_items:        #Mission Item created base on the Mavlink Message protocol
        print("--Creating a waypoint")

        the_connection.mav.mission_item_send(the_connection.target_system,      #Target system
                                            the_connection.target_component,    #Target component
                                            waypoint.seq,                       
                                            waypoint.frame,
                                            waypoint.command,
                                            waypoint.current,
                                            waypoint.autocontinue,
                                            waypoint.param1,                    #Hold Time
                                            waypoint.param2,                    
                                            waypoint.param3,
                                            waypoint.param4,                    #Custom parameter for speed
                                            waypoint.param5,                    #Local X
                                            waypoint.param6,                    #Local Y
                                            waypoint.param7,                    #Local Z
                                            waypoint.mission_type)

    if waypoint != mission_items[n-1]:
        ack(the_connection, "MISSION_REQUEST")

    ack(the_connection, "MISSION_ACK")


#Send message for the drone to return to the launch point
def set_return(the_connection):
    print("--Set Return To launch")
    the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,
                            mavutil.mavlink.MAV_CMD_NAV_RETURN_TO_LAUNCH, 0, 0, 0, 0, 0, 0, 0, 0) #MAV_CMD_NAV_RETURN_TO_LAUNCH parameter has 7 values

    ack(the_connection, "COMMAND_ACK")

#Start mission
def start_mission(the_connection):
    print("--Mission Start")
    the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,
                            mavutil.mavlink.MAV_CMD_MISSION_START, 0, 0, 0, 0, 0, 0, 0, 0) # Why 8 components? bit...?

    ack(the_connection, "COMMAND_ACK")

#Acknowledgement from the Drone
def ack(the_connection, keyword):
    print("--Mesager Read " + str(the_connection.recv_match(type=keyword, blocking = True)))

#Main Function
if __name__ == "__main__":
    print("--Program Started")
    the_connection = mavutil.mavlink_connection("udp:localhost:14540")

    while(the_connection.target_system == 0):
        print("--Checking Heartbeat")
        the_connection.wait_heartbeat() #wait_heartbeat() Finding problem...
        print("--heartbeat from system (system %u component %u)" % (the_connection.target_system, the_connection.target_component))

    mission_waypoints = []

    mission_waypoints.append(mission_item(0, 0, 35.706537, 128.455759, 5, 3)) #waypoint,0,Lattitude,longitutde,altitude, speed
    mission_waypoints.append(mission_item(1, 0, 35.706148, 128.457621, 10, 2))
    mission_waypoints.append(mission_item(2, 0, 35.706731, 128.457741, 5, 4))
    mission_waypoints.append(mission_item(3, 0, 35.706118, 128.457883, 10, 3))
    mission_waypoints.append(mission_item(4, 0, 35.706622, 128.456753, 10, 2))
    mission_waypoints.append(mission_item(5, 0, 35.706537, 128.455759, 1, 1))
    

    upload_mission(the_connection, mission_waypoints)

    arm(the_connection)

    takeoff(the_connection)

    start_mission(the_connection)

    # input value extraction example


    for mission_item in mission_waypoints:
        print("--Message Read " + str(the_connection.recv_match(type="MISSION_ITEM_REACHED", condition = "MISSION_ITEM_REACHED.seq == {0}".format(mission_item.seq), blocking = True)))

    set_return(the_connection)
    print("done!")
